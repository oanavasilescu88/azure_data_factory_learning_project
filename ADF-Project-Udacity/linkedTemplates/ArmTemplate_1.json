{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF-Project-Udacity"
		},
		"tr_ingest_population_data_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/74d02aa7-18c6-4ce4-98e6-b7654fdb579f/resourceGroups/ADF_Project/providers/Microsoft.Storage/storageAccounts/additionalstorageacct"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflow aggregate nyc paroll data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_nycpayroll_azuresqldb",
								"type": "DatasetReference"
							},
							"name": "SourcePayrollDataSQLDB"
						},
						{
							"dataset": {
								"referenceName": "ds_nycpayroll_history",
								"type": "DatasetReference"
							},
							"name": "SourcePayrollHistoryDataLake"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_table_synapse_nycpayroll_summary",
								"type": "DatasetReference"
							},
							"name": "sinkToSummaryTableSynpase"
						}
					],
					"transformations": [
						{
							"name": "unionPayrollData"
						},
						{
							"name": "filter1"
						},
						{
							"name": "TotalPaid"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     df_param_fiscal_year as integer (2020)",
						"}",
						"source(output(",
						"          FiscalYear as integer,",
						"          PayrollNumber as integer,",
						"          AgencyID as string,",
						"          AgencyName as string,",
						"          EmployeeID as string,",
						"          LastName as string,",
						"          FirstName as string,",
						"          AgencyStartDate as date,",
						"          WorkLocationBorough as string,",
						"          TitleCode as string,",
						"          TitleDescription as string,",
						"          LeaveStatusasofJune30 as string,",
						"          BaseSalary as double,",
						"          PayBasis as string,",
						"          RegularHours as double,",
						"          RegularGrossPaid as double,",
						"          OTHours as double,",
						"          TotalOTPaid as double,",
						"          TotalOtherPay as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourcePayrollDataSQLDB",
						"source(output(",
						"          FiscalYear as short,",
						"          PayrollNumber as short,",
						"          AgencyID as string,",
						"          AgencyName as string,",
						"          EmployeeID as string,",
						"          LastName as string,",
						"          FirstName as string,",
						"          AgencyStartDate as date,",
						"          WorkLocationBorough as string,",
						"          TitleCode as string,",
						"          TitleDescription as string,",
						"          LeaveStatusasofJune30 as string,",
						"          BaseSalary as double,",
						"          PayBasis as string,",
						"          RegularHours as double,",
						"          RegularGrossPaid as double,",
						"          OTHours as double,",
						"          TotalOTPaid as double,",
						"          TotalOtherPay as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourcePayrollHistoryDataLake",
						"SourcePayrollDataSQLDB, SourcePayrollHistoryDataLake union(byName: true)~> unionPayrollData",
						"unionPayrollData filter(toInteger(FiscalYear) >= $df_param_fiscal_year) ~> filter1",
						"filter1 derive(TotalPaid = RegularGrossPaid + TotalOTPaid + TotalOtherPay) ~> TotalPaid",
						"TotalPaid aggregate(groupBy(AgencyName,",
						"          FiscalYear),",
						"     TotalPaid = sum(TotalPaid)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FiscalYear as integer,",
						"          AgencyName as string,",
						"          TotalPaid as double",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          FiscalYear,",
						"          AgencyName,",
						"          TotalPaid",
						"     )) ~> sinkToSummaryTableSynpase"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow load agency data to synapse')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_agency_master_datalake",
								"type": "DatasetReference"
							},
							"name": "SourceAgencyDatalake"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_payroll_agency_master_synapse",
								"type": "DatasetReference"
							},
							"name": "sinkAgencySynapse"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          AgencyID as short,",
						"          AgencyName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceAgencyDatalake",
						"SourceAgencyDatalake sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          AgencyID as string,",
						"          AgencyName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          AgencyID,",
						"          AgencyName",
						"     )) ~> sinkAgencySynapse"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow load employee data to synapse')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_emp_master_datalake",
								"type": "DatasetReference"
							},
							"name": "SourceEmployeeDatalake"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_payroll_emp_md_synapse",
								"type": "DatasetReference"
							},
							"name": "SinkToEmployeeSynapse"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          EmployeeID as string,",
						"          LastName as string,",
						"          FirstName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceEmployeeDatalake",
						"SourceEmployeeDatalake sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmployeeID as string,",
						"          LastName as string,",
						"          FirstName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EmployeeID,",
						"          LastName,",
						"          FirstName",
						"     )) ~> SinkToEmployeeSynapse"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow load payroll data from datalake to sql db')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_nycpayroll_2021_datalake",
								"type": "DatasetReference"
							},
							"name": "nycpayrolldatalake"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_nycpayroll_azuresqldb",
								"type": "DatasetReference"
							},
							"name": "SinkToAzureSQL"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          FiscalYear as string,",
						"          PayrollNumber as string,",
						"          AgencyCode as string,",
						"          AgencyName as string,",
						"          EmployeeID as string,",
						"          LastName as string,",
						"          FirstName as string,",
						"          AgencyStartDate as string,",
						"          WorkLocationBorough as string,",
						"          TitleCode as string,",
						"          TitleDescription as string,",
						"          LeaveStatusasofJune30 as string,",
						"          BaseSalary as string,",
						"          PayBasis as string,",
						"          RegularHours as string,",
						"          RegularGrossPaid as string,",
						"          OTHours as string,",
						"          TotalOTPaid as string,",
						"          TotalOtherPay as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> nycpayrolldatalake",
						"nycpayrolldatalake sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FiscalYear as integer,",
						"          PayrollNumber as integer,",
						"          AgencyID as string,",
						"          AgencyName as string,",
						"          EmployeeID as string,",
						"          LastName as string,",
						"          FirstName as string,",
						"          AgencyStartDate as date,",
						"          WorkLocationBorough as string,",
						"          TitleCode as string,",
						"          TitleDescription as string,",
						"          LeaveStatusasofJune30 as string,",
						"          BaseSalary as double,",
						"          PayBasis as string,",
						"          RegularHours as double,",
						"          RegularGrossPaid as double,",
						"          OTHours as double,",
						"          TotalOTPaid as double,",
						"          TotalOtherPay as double",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          FiscalYear,",
						"          PayrollNumber,",
						"          AgencyID = AgencyCode,",
						"          AgencyName,",
						"          EmployeeID,",
						"          LastName,",
						"          FirstName,",
						"          AgencyStartDate,",
						"          WorkLocationBorough,",
						"          TitleCode,",
						"          TitleDescription,",
						"          LeaveStatusasofJune30,",
						"          BaseSalary,",
						"          PayBasis,",
						"          RegularHours,",
						"          RegularGrossPaid,",
						"          OTHours,",
						"          TotalOTPaid,",
						"          TotalOtherPay",
						"     )) ~> SinkToAzureSQL"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow load payroll data to synapse')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_nycpayroll_azuresqldb",
								"type": "DatasetReference"
							},
							"name": "SourcePayrollDataSQLDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_payroll_data_synapse",
								"type": "DatasetReference"
							},
							"name": "sinkPayrollToSynapse"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          FiscalYear as integer,",
						"          PayrollNumber as integer,",
						"          AgencyID as string,",
						"          AgencyName as string,",
						"          EmployeeID as string,",
						"          LastName as string,",
						"          FirstName as string,",
						"          AgencyStartDate as date,",
						"          WorkLocationBorough as string,",
						"          TitleCode as string,",
						"          TitleDescription as string,",
						"          LeaveStatusasofJune30 as string,",
						"          BaseSalary as double,",
						"          PayBasis as string,",
						"          RegularHours as double,",
						"          RegularGrossPaid as double,",
						"          OTHours as double,",
						"          TotalOTPaid as double,",
						"          TotalOtherPay as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourcePayrollDataSQLDB",
						"SourcePayrollDataSQLDB sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FiscalYear as integer,",
						"          PayrollNumber as integer,",
						"          AgencyID as string,",
						"          AgencyName as string,",
						"          EmployeeID as string,",
						"          LastName as string,",
						"          FirstName as string,",
						"          AgencyStartDate as date,",
						"          WorkLocationBorough as string,",
						"          TitleCode as string,",
						"          TitleDescription as string,",
						"          LeaveStatusasofJune30 as string,",
						"          BaseSalary as double,",
						"          PayBasis as string,",
						"          RegularHours as double,",
						"          RegularGrossPaid as double,",
						"          OTHours as double,",
						"          TotalOTPaid as double,",
						"          TotalOtherPay as double",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          FiscalYear,",
						"          PayrollNumber,",
						"          AgencyID,",
						"          AgencyName,",
						"          EmployeeID,",
						"          LastName,",
						"          FirstName,",
						"          AgencyStartDate,",
						"          WorkLocationBorough,",
						"          TitleCode,",
						"          TitleDescription,",
						"          LeaveStatusasofJune30,",
						"          BaseSalary,",
						"          PayBasis,",
						"          RegularHours,",
						"          RegularGrossPaid,",
						"          OTHours,",
						"          TotalOTPaid,",
						"          TotalOtherPay",
						"     )) ~> sinkPayrollToSynapse"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow load title data to synpase')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_title_master_datalake",
								"type": "DatasetReference"
							},
							"name": "SourceTitleDatalake"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_payroll_title_master_synapse",
								"type": "DatasetReference"
							},
							"name": "SinkToTitleSynapse"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          TitleCode as string,",
						"          TitleDescription as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceTitleDatalake",
						"SourceTitleDatalake sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          TitleCode as string,",
						"          TitleDescription as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkToTitleSynapse"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline load all data to synapse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Load Emp MD",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow load employee data to synapse",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceEmployeeDatalake": {},
									"SinkToEmployeeSynapse": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_StorageAcct_Conn",
									"type": "LinkedServiceReference"
								},
								"folderPath": "adlsnycpayroll-oana-v/dirstaging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Data flow Load Title MD",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow load title data to synpase",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceTitleDatalake": {},
									"SinkToTitleSynapse": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_StorageAcct_Conn",
									"type": "LinkedServiceReference"
								},
								"folderPath": "adlsnycpayroll-oana-v/dirstaging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Data flow Load Agency MD",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow load agency data to synapse",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceAgencyDatalake": {},
									"sinkAgencySynapse": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_StorageAcct_Conn",
									"type": "LinkedServiceReference"
								},
								"folderPath": "adlsnycpayroll-oana-v/dirstaging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Data flow Load Payroll",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Data flow Load Emp MD",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Data flow Load Title MD",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Data flow Load Agency MD",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow load payroll data to synapse",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourcePayrollDataSQLDB": {},
									"sinkPayrollToSynapse": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_StorageAcct_Conn",
									"type": "LinkedServiceReference"
								},
								"folderPath": "adlsnycpayroll-oana-v/dirstaging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-24T10:43:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow load employee data to synapse')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow load title data to synpase')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow load agency data to synapse')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow load payroll data to synapse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline load payroll aggregate data to synapse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Aggregate Payroll to Synapse",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow aggregate nyc paroll data",
								"type": "DataFlowReference",
								"parameters": {
									"df_param_fiscal_year": {
										"value": "@pipeline().parameters.pl_param_fiscal_year",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourcePayrollDataSQLDB": {},
									"SourcePayrollHistoryDataLake": {},
									"sinkToSummaryTableSynpase": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_StorageAcct_Conn",
									"type": "LinkedServiceReference"
								},
								"folderPath": "adlsnycpayroll-oana-v/dirstaging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pl_param_fiscal_year": {
						"type": "int",
						"defaultValue": 2020
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-24T12:42:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow aggregate nyc paroll data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline load payroll data from datalake to sql db')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow load payroll data to sql db",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow load payroll data from datalake to sql db",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"nycpayrolldatalake": {},
									"SinkToAzureSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-24T09:35:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow load payroll data from datalake to sql db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_ingest_population_data')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_ingest_population_data",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/population/blobs/population_by_age.tsv.gz",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('tr_ingest_population_data_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		}
	]
}